
#include<bits/stdc++.h>
using namespace std;

/*
		   1
		  / \
		 2   3
		/ \ / \
	   4  5 6  6
	  / \ /
	 6  6 6
*/

struct Node {
	int val;
	Node* left;
	Node* right;

	Node(int d) {
		this->val = d;
		this->left = NULL;
		this->right = NULL;
	}
};
Node* insertNode(vector<int> &arr, int ind) {
	// base case

	Node* root = NULL;

	if (ind < arr.size()) {
		root = new Node(arr[ind]);
		root->left = insertNode(arr, 2 * ind + 1);
		root->right = insertNode(arr, 2 * ind + 2);
	}

	return root;
}

void inorderTraversal(Node* root)
{
	if (root != NULL)
	{
		inorderTraversal(root->left);
		cout << root->val << " ";
		inorderTraversal(root->right);
	}
}


void printLevelOrder(Node* root)
{
	// Base Case
	if (root == NULL)
		return;

	// Create an empty queue for level order traversal
	queue<Node*> q;

	// Enqueue Root and initialize height
	q.push(root);

	while (q.empty() == false) {

		// Print front of queue and remove it from queue
		Node* node = q.front();
		cout << node->val << " ";
		q.pop();

		// Enqueue left child
		if (node->left != NULL)
			q.push(node->left);

		// Enqueue right child
		if (node->right != NULL)
			q.push(node->right);
	}
}

int  main()
{
	int n;
	cin >> n;
	vector<int> v(n);
	for (int i = 0; i < n; i++) {
		cin >> v[i];
	}
	Node * root = insertNode(v, 0);

	printLevelOrder(root);

	return 0;
}
